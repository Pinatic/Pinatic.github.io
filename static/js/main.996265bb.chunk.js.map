{"version":3,"sources":["api/SteamProfiles.js","api/api.js","components/reusables/Status.js","components/reusables/Value.js","components/reusables/Label.js","components/reusables/Divider.js","components/reusables/ProfileImage.js","components/reusables/ProfileCard.js","components/steam/SteamProfile.js","components/reusables/Title.js","components/steam/SteamFriends.js","components/steam/ResentGames.js","App.js","reportWebVitals.js","index.js"],"names":["Pieter","Jildert","Ilse","Rianne","IdMap","id","API","callback","axios","get","endpoint","SteamProfileMap","then","res","data","response","games","gameId","app","hash","StatusDot","styled","div","props","color","Status","StatusText","span","getStatus","getStatusColor","url","height","Gradients","GameID","idMap","Name","SteamProfile","useState","profileInfo","setProfileInfo","ownedGames","setOwnedGames","useParams","useEffect","getProfileInfo","result","getOwnedGames","ProfileCard","ProfileImage","avatarfull","personaname","personastate","Divider","Label","Value","end","game_count","duration","h4","Container","Box","SteamFriends","friends","setFriends","GetFriends","Title","friendslist","sort","a","b","friend_since","slice","map","friend","to","pathname","steamid","ResentGames","resentGames","setResentGames","totalAchievements","setTotalAchievements","myAchievements","setMyAchievements","GetResentGames","forEach","game","GetGameAchievements","appid","achievements","prev","achievementpercentages","length","GetPlayerAchievements","playerAchievements","playerstats","img_logo_url","getGameImageUrl","name","Math","round","playtime_forever","ProgressBar","striped","variant","now","style","marginTop","Layout","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.996265bb.chunk.js","sourcesContent":["\nexport const Pieter = \"76561198137873527\";\nexport const Jildert = \"76561198042254620\";\nexport const Ilse = \"76561198401434810\";\nexport const Rianne = \"76561198798100412\";\n\n\nconst IdMap = {\n    \"\": Pieter,\n    \"pieter\": Pieter,\n    \"ilse\": Ilse,\n    \"jildert\": Jildert,\n    'rianne': Rianne,\n}\n\n// url parameter name id naar een echte id, als het kan, anders gewoon de id\nexport default (id) => {\n    id = id || \"\";\n    return IdMap[id] || id\n}\n\n","import axios from 'axios'\n\nimport SteamProfileMap from './SteamProfiles';\n\nexport default class API {\n    static endpoint = \"https://pinatic-api.herokuapp.com/\"\n\n    static getProfileInfo(id, callback) {\n        axios.get(API.endpoint + 'summary/' + SteamProfileMap(id)).then(res => callback(res.data))\n    }\n\n    static getOwnedGames(id, callback) {\n        axios.get(API.endpoint + 'owned-games/' + SteamProfileMap(id)).then(res => callback(res.data.response))\n    }\n\n    static GetFriends(id, callback) {\n        axios.get(API.endpoint + 'friends/' + SteamProfileMap(id)).then(res => callback(res.data))\n    }\n\n    static GetResentGames(id, callback) {\n        axios.get(API.endpoint + 'resent-games/' + SteamProfileMap(id)).then(res => callback(res.data.response.games))\n    }\n\n    static GetGameAchievements(gameId, callback) {\n        axios.get(API.endpoint + 'achievements/' + gameId).then(res => callback(res.data))\n    }\n\n    static GetPlayerAchievements(id, gameId, callback) {\n        axios.get(API.endpoint + 'stats/' + SteamProfileMap(id) + '/' + gameId).then(res => callback(res.data))\n    }\n\n    static getGameImageUrl(app, hash) {\n        return API.endpoint + 'game-image/' + app + '/' + hash;\n    }\n}","import styled from 'styled-components';\n\nconst StatusDot = styled.div`\n    height: 12px;\n    width: 12px;\n    border-radius: 100%;\n    background-color: ${props => props.color};\n`\n\nconst Status = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nconst StatusText = styled.span`\n    margin-left: 4px;\n    font-weight: 500;\n`\n\nconst getStatus = (id) => {\n    return [\"Offline\", \"Online\", \"Busy\", \"Away\", \"Snooze\", \"Looking to trade\", \"Looking to play\"][id]\n}\n\nconst getStatusColor = (id) => {\n    return [\"gray\", \"green\", \"red\", \"yellow\", \"orange\", \"brown\", \"purple\"][id]\n}\n\nexport { Status, StatusDot, StatusText, getStatus, getStatusColor };","import styled from 'styled-components';\n\nexport default styled.span`\n    display: inherit;\n    font-size: 24px;\n    font-weight: 400;\n`","import styled from 'styled-components';\n\nexport default styled.span`\n    font-size: 20px;\n    display: inherit;\n`","import styled from 'styled-components';\n\nexport default styled.div`\n    height: 1px;\n    background-color: #5d5d5d;\n    width: 95%;\n    margin: 0 auto;\n    margin-top: 8px;\n    margin-bottom: 8px;\n`","import styled from 'styled-components';\n\nexport default styled.div`\n    background-image: url(${(props) => props.url});\n    background-repeat: no-repeat;\n    background-position: center;\n    height: ${(props) => props.height || 200}px;\n    width: 200px;\n`","import styled from 'styled-components';\nimport idMap, { Jildert, Pieter, Ilse, Rianne } from '../../api/SteamProfiles';\n\nconst Gradients = {\n    [Jildert]:  'linear-gradient(140deg,#4e4e4e 0%,#626262 50%,#792e2e 75%)',\n    [Pieter]:   'linear-gradient(140deg,#442d48 0%,#646060 50%,#583b8d 75%)',\n    [Ilse]:     'linear-gradient(140deg,#96bfc3 0%,#929598 50%,#00a8f4 75%)',\n    [Rianne]:   'linear-gradient(140deg,#fff9c8 0%,#fbffd4 50%,#FFEB3B 75%)'\n}\n\nexport default styled.div`\n    margin-top: 8px;\n    padding: 12px;\n\n    background-color: #a8a8a8;\n\n    background-image: ${({ GameID }) => Gradients[idMap(GameID)] || ''};\n\n    border-radius: 4px;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n    text-align: center;\n`","import React, { useEffect, useState } from 'react'\nimport API from '../../api/api'\nimport styled from 'styled-components'\nimport CountUp from 'react-countup';\nimport { useParams } from 'react-router-dom'\n\nimport { Status, StatusDot, StatusText, getStatus, getStatusColor } from '../reusables/Status';\nimport Value from '../reusables/Value';\nimport Label from '../reusables/Label';\nimport Divider from '../reusables/Divider';\nimport ProfileImage from '../reusables/ProfileImage';\nimport ProfileCard from '../reusables/ProfileCard';\n\nconst Name = styled.span`\n    font-size: 24px;\n    font-weight: 500;\n`\n\nconst SteamProfile = (props) => {\n    const [profileInfo, setProfileInfo] = useState();\n    const [ownedGames, setOwnedGames] = useState();\n    const { id } = useParams();\n\n    // From props or url\n    const GameID = props.gameId || id;\n\n    useEffect(() => {\n        API.getProfileInfo(GameID, result => setProfileInfo(result))\n    }, [GameID])\n\n\n    useEffect(() => {\n        API.getOwnedGames(GameID, result => setOwnedGames(result))\n    }, [GameID])\n\n    return profileInfo && ownedGames ? <ProfileCard GameID={GameID}>\n        <ProfileImage url={profileInfo && profileInfo.avatarfull}/>\n        <Name>{profileInfo.personaname}</Name>\n        <Status><StatusDot color={getStatusColor(profileInfo.personastate)} /><StatusText>{getStatus(profileInfo.personastate)}</StatusText></Status>\n        <Divider />\n        <Label>Owned games</Label>\n        <Value><CountUp end={ownedGames.game_count || 200} duration={2} /></Value>\n    </ProfileCard> : <></>\n}\n\n\nexport default SteamProfile","import styled from 'styled-components'\n\nexport default styled.h4`\n    color: #c9c9c9;\n    font-size: 29px;\n    margin: 0 auto;\n    text-align: center;\n`","import React, { useEffect, useState } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport styled from 'styled-components';\n\nimport API from '../../api/api';\nimport Title from '../reusables/Title';\nimport SteamProfile from './SteamProfile';\n\n\nconst Container = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    animation: fadein 3s;\n\n    @media (max-width: 768px) {\n        display: grid;\n    }\n\n`\n\nconst Box = styled.div`\n  padding: 10px;\n  margin: 5px;\n  cursor: pointer;\n`\n\nconst SteamFriends = () => {\n    const [friends, setFriends] = useState();\n    const { id } = useParams();\n\n    useEffect(() => {\n        API.GetFriends(id, res => {\n            setFriends(res)\n        })\n    }, [id])\n\n    return <>\n        <Title>My first three Friends</Title>\n        <Container>\n            {\n                friends && friends.friendslist.friends.sort((a,b) => a.friend_since - b.friend_since).slice(0, 3).map(friend => {\n                return <Link \n                    key={friend.steamid}\n                    to={{\n                        pathname: '/' + friend.steamid \n                    }}\n                >\n                    <Box>\n                        <SteamProfile key={friend.steamid} gameId={friend.steamid} />\n                    </Box>\n                </Link>\n                })\n            }\n        </Container>\n    </>\n}\n\nexport default SteamFriends","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useParams } from 'react-router-dom'\nimport API from '../../api/api';\n\nimport ProfileImage from '../reusables/ProfileImage'\nimport ProfileCard from '../reusables/ProfileCard'\n\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Label from '../reusables/Label';\nimport Value from '../reusables/Value';\nimport Divider from '../reusables/Divider';\nimport Title from '../reusables/Title';\n\n\nconst Container = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    animation: fadein 3s;\n\n    @media (max-width: 768px) {\n        display: grid;\n    }\n`\n\nconst Box = styled.div`\n  padding: 10px;\n  margin: 5px;\n`\n\nconst Name = styled.span`\n    font-size: 24px;\n    font-weight: 500;\n`\n\nconst getGameImageUrl = (appid, hash) => {\n    return API.getGameImageUrl(appid, hash);\n}\n\nconst ResentGames = () => {\n    const [resentGames, setResentGames] = useState();\n    const [totalAchievements, setTotalAchievements] = useState({});\n    const [myAchievements, setMyAchievements] = useState({});\n\n    const { id } = useParams();\n\n    useEffect(() => {\n        API.GetResentGames(id, (res) => {\n            setResentGames(res)\n\n            res && res.forEach(game => {\n                API.GetGameAchievements(game.appid, (achievements => {\n                    setTotalAchievements(prev => ({...prev, [game.appid]: achievements.achievementpercentages.achievements.length}))\n                }))\n\n                API.GetPlayerAchievements(id, game.appid, (playerAchievements => {\n                    setMyAchievements(prev => ({...prev, [game.appid]: playerAchievements.playerstats.achievements.length}))\n                }))\n            });\n        })\n    }, [id])\n\n    return resentGames ? <>\n    <Title>My recent games</Title>\n    <Container>\n        { resentGames.slice(0,4).map(game => {\n            return <Box key={game.appid}>\n                <ProfileCard GameID={game.appid}>\n                    <ProfileImage height={85} url={getGameImageUrl(game.appid, game.img_logo_url)}/>\n                    <Name>{game.name}</Name>\n                    <Divider />\n\n                    <Label>PlayTime</Label>\n                    <Value>{Math.round(game.playtime_forever / 60)} hours</Value>\n                    { \n                        totalAchievements[game.appid] ? <>\n                            <Divider />\n                            <Label>Progress</Label>\n                            <ProgressBar striped variant=\"success\" now={100 / totalAchievements[game.appid] * myAchievements[game.appid]} />\n                        </> : <div style={{marginTop: 63}} />\n                    }\n                </ProfileCard>\n            </Box>\n        })}\n    </Container>\n    </> : null\n}\n\nexport default ResentGames;","import styled from 'styled-components'\nimport SteamProfile from './components/steam/SteamProfile';\nimport SteamFriends from './components/steam/SteamFriends';\nimport Divider from './components/reusables/Divider';\nimport ResentGames from './components/steam/ResentGames';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\nconst Container = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    animation: fadein 3s;\n    margin-bottom: 24px;\n    margin-top: 24px;\n\n    @keyframes fadein {\n        from { opacity: 0; }\n        to   { opacity: 1; }\n    }\n`\n\nconst Layout = () => {\n  return <>\n    <Container>\n      <SteamProfile />\n    </Container>\n    <Divider />\n    <ResentGames />\n    <Divider />\n    <SteamFriends />\n  </>\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/:id\">\n          <Layout />\n        </Route>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","react","style","width","height","position","lib_default","videoOptions","src","ref","videoRef","play","build_default","background","image","textColor","overlay","color","opacity","logo","alt","title","text","description","maxWidth","subscribe","placeholder","buttonText","onSubmit","value","console","log","links","url","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yMAoEeA,EA/DH,kBACVC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CACVC,MAAO,OACPC,OAAQ,OACRC,SAAU,UAEVP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAYQ,aAAc,CAACC,IAAK,6DAC/BC,IAAK,SAAAC,GACJA,EAASC,YAGfb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CACEc,WAAY,CACVC,MAAO,mEACPC,UAAW,OACXC,QAAS,CACPC,MAAO,OACPC,QAAS,OAGbC,KAAM,CACJX,IAAK,sDACLY,IAAK,YAEPC,MAAO,CACLC,KAAM,WAERC,YAAa,CACXD,KAAM,8FACNpB,MAAO,CACLsB,SAAU,UAGdC,UAAW,CACTC,YAAa,mBACbC,WAAY,YACZC,SAAU,SAACC,GACTC,QAAQC,IAAI,qBAAsBF,KAGtCG,MAAO,CACL,CACEC,IAAK,4BACLnB,MAAO,uDAET,CACEmB,IAAK,2BACLnB,MAAO,uDAET,CACEmB,IAAK,4BACLnB,MAAO,uDAET,CACEmB,IAAK,6BACLnB,MAAO,4DCnDKoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e041db66.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport UnderConstruction from 'react-under-construction';\nimport 'react-under-construction/build/css/index.css';\nimport VideoCover from 'react-video-cover'\n\nconst App = () => (\n  <Fragment>\n    <div style={{\n      width: '100%',\n      height: '100%',\n      position: 'fixed',\n    }}>\n      <VideoCover videoOptions={{src: 'https://media.dumpert.nl/720p/_725b5514_YTDL_1.mp4.mp4.mp4',\n       ref: videoRef => {\n        videoRef.play();\n      }}} />\n    </div>\n  <UnderConstruction\n    background={{\n      image: 'https://static.pexels.com/photos/259698/pexels-photo-259698.jpeg',\n      textColor: '#fff',\n      overlay: {\n        color: '#000',\n        opacity: '.5'\n      }\n    }}\n    logo={{\n      src: 'https://image.ibb.co/b7guP5/Rubbby_without_text.png',\n      alt: 'alt text'\n    }}\n    title={{\n      text: 'Pinatic'\n    }}\n    description={{\n      text: 'This website is under construction. It will be here soon, because DropSaus is working on it',\n      style: {\n        maxWidth: '440px',\n      }\n    }}\n    subscribe={{\n      placeholder: 'Enter your email',\n      buttonText: 'Subscribe',\n      onSubmit: (value) => {\n        console.log('user typed email :', value);\n      }\n    }}\n    links={[\n      {\n        url: 'https://www.facebook.com/',\n        image: 'https://image.flaticon.com/icons/svg/220/220200.svg',\n      },\n      {\n        url: 'https://www.twitter.com/',\n        image: 'https://image.flaticon.com/icons/svg/145/145812.svg',\n      },\n      {\n        url: 'https://www.linkedin.com/',\n        image: 'https://image.flaticon.com/icons/svg/145/145807.svg',\n      },\n      {\n        url: 'mailto:someone@example.com',\n        image: 'https://image.flaticon.com/icons/svg/321/321817.svg',\n      },\n    ]}\n  />\n  </Fragment>\n);\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}